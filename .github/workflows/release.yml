name: Patch and Release OTA

on:

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:
    inputs:
      device-id:
        description: Device code name
        required: true
      root:
        description: Add root to the build
        required: false
        type: boolean
        default: false
      magisk-preinit-device:
        description: Magisk preinit device. For example, "sda8", "sda15" etc.,
        required: false
      update-channel:
        description: GrapheneOS update channel. Supports `alpha`, `beta` and `stable`. Defaults to `stable`
        required: false

env:
  CARGO_INCREMENTAL: 1
  DEVICE_NAME: ${{ github.event.inputs.device-id }}
  INTERACTIVE_MODE: false
  GRAPHENEOS_UPDATE_CHANNEL: ${{ github.event.inputs.update-channel }}
  RUST_BACKTRACE: short
  RUSTUP_MAX_RETRIES: 10

jobs:
  build:
    runs-on: ubuntu-latest

    # Required by publisher step
    permissions: write-all

    steps:
      - name: Check if `magisk-preinit-device` is set when `root` is true
        run: |
          # Convert inputs to proper boolean values
          root=${{ github.event.inputs.root }}
          magisk_preinit_device=${{ github.event.inputs.magisk-preinit-device }}

          # Ensure that the boolean comparison is correctly handled
          if [ "$root" == "true" ] && [ -z "$magisk_preinit_device" ]; then
            echo -e "::error:: magisk-preinit-device is required when root is true."
            exit 1
          fi

      - name: Checkout code
        uses: actions/checkout@v4
        with:
          # Allow for switching to github-pages branch
          fetch-depth: 0

      - name: Read from `env.toml` if exist
        if: ${{ github.event_name == 'schedule' }}
        run: |
          # Check if the file exists
          source src/util_functions.sh && check_toml_env

          echo "DEVICE_NAME=${DEVICE_NAME}" >> $GITHUB_ENV
          echo "GRAPHENEOS_UPDATE_CHANNEL=${GRAPHENEOS[UPDATE_CHANNEL]}" >> $GITHUB_ENV

      - name: Setup Git
        run: |
          # Configure git for pushing changes
          git config --global user.email ${{ secrets.EMAIL }} && git config --global user.name PiX

      - name: Install Rust stable
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: stable 2 weeks ago

      - name: Build and Cache Rust Dependencies
        uses: Swatinem/rust-cache@v2.7.8

      - name: Install Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12-dev"

      - name: Setup Environment variables
        run: |
          echo "KEYS_AVB_BASE64=${{ secrets.AVB_KEY }}" >> $GITHUB_ENV
          echo "KEYS_CERT_OTA_BASE64=${{ secrets.CERT_OTA }}" >> $GITHUB_ENV
          echo "KEYS_OTA_BASE64=${{ secrets.OTA_KEY }}" >> $GITHUB_ENV

      - name: Patch OTA
        shell: bash
        env:
          ADDITIONALS_ROOT: ${{ github.event.inputs.root }}
          CLEANUP: true
          MAGISK_PREINIT: ${{ github.event.inputs.magisk-preinit-device }}
          PASSPHRASE_AVB: ${{ secrets.PASSPHRASE_AVB }}
          PASSPHRASE_OTA: ${{ secrets.PASSPHRASE_OTA }}
        run: |
          echo -e "Running release script.."

          # Instead of running the script directly,
          # we source it to get the variables in the current shell and use them in the next steps by exporting them
          . src/main.sh

          # Export the variables for the next steps
          echo "GRAPHENEOS_OTA_TARGET=${GRAPHENEOS[OTA_TARGET]}" >> $GITHUB_ENV
          echo "OUTPUTS_PATCHED_OTA=${OUTPUTS[PATCHED_OTA]}" >> $GITHUB_ENV
          echo "WORKDIR=${WORKDIR}" >> $GITHUB_ENV

      - name: Generate Changelog
        run: |
          # Generate a changelog for the release taking the latest GrapheneOS release
          echo -e "See [Changelog](https://grapheneos.org/releases#${{ env.GRAPHENEOS_VERSION }})." > ${{ github.workspace }}-CHANGELOG.txt

      - name: Make Release
        uses: softprops/action-gh-release@v2
        with:
          body_path: ${{ github.workspace }}-CHANGELOG.txt
          files: |
            ${{ env.OUTPUTS_PATCHED_OTA }}
            ${{ env.OUTPUTS_PATCHED_OTA }}.csig
          name: "2025012701"
          tag_name: "2025012701"

